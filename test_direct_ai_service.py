#!/usr/bin/env python3
"""
Direct test of AI service functions to debug marketing domain detection.
"""

import sys
import os

# Add the app directory to Python path
app_dir = os.path.join(os.path.dirname(__file__), 'react-python-auth', 'backend', 'app')
sys.path.insert(0, app_dir)

try:
    from services.ai_service import generate_brd_html
    print("✅ AI service imported successfully")
except Exception as e:
    print(f"❌ Failed to import AI service: {e}")
    sys.exit(1)

def test_enhanced_brd_generation():
    """Test enhanced BRD generation with marketing domain."""
    
    print("🧪 Testing Enhanced BRD Generation...")
    print("=" * 50)
    
    project = "Marketing Automation System"
    inputs = {
        "projectName": "Marketing Automation System",
        "projectDescription": "Advanced marketing automation platform for managing multi-channel campaigns, customer segmentation, and marketing analytics",
        "businessRequirements": [
            "Customer segmentation based on behavior and demographics",
            "Multi-channel campaign management (email, SMS, push notifications)",
            "A/B testing capabilities for content optimization",
            "Real-time analytics and attribution reporting", 
            "Marketing automation workflows and triggers",
            "Content and asset management system",
            "Integration with CRM and data sources"
        ],
        "businessObjectives": [
            "Increase customer engagement through personalized campaigns",
            "Improve marketing ROI with data-driven insights",
            "Automate repetitive marketing tasks",
            "Enable omnichannel customer experiences"
        ]
    }
    
    try:
        print("🔄 Generating BRD...")
        html = generate_brd_html(project, inputs, 1)
        
        print(f"✅ Generated BRD with {len(html)} characters")
        
        # Check for marketing-specific content
        if "Marketing managers" in html:
            print("✅ Marketing stakeholders found")
        else:
            print("❌ Marketing stakeholders missing")
            
        if "Campaign managers" in html:
            print("✅ Campaign managers found")
        else:
            print("❌ Campaign managers missing")
            
        if "Email specialists" in html:
            print("✅ Email specialists found")
        else:
            print("❌ Email specialists missing")
            
        if "Generated by BA Assistant Tool (fallback)" in html:
            print("❌ Using fallback template - AI enhancement failed")
        else:
            print("✅ Using AI-enhanced generation")
            
        # Save for inspection
        with open("test_direct_brd_output.html", "w", encoding="utf-8") as f:
            f.write(html)
        print("💾 Direct BRD output saved to: test_direct_brd_output.html")
        
        return html
        
    except Exception as e:
        print(f"❌ BRD generation failed: {e}")
        return None

if __name__ == "__main__":
    # Test BRD generation directly
    html = test_enhanced_brd_generation()
    
    print(f"\n📊 Summary:")
    print(f"BRD generated: {'Yes' if html else 'No'}")
    if html:
        print(f"BRD length: {len(html)} characters")
        fallback_used = "fallback" in html.lower()
        print(f"Using fallback: {'Yes' if fallback_used else 'No'}")